#%%  Load required module
import matplotlib.pyplot as plt
from aesim.simba import Design, ProjectRepository
import os, pathlib
import numpy as np
import math

#%%  Open Design
filepath = os.path.join(pathlib.Path().absolute(), "3ph_ActiveFrontEnd.simba")
print("loading model: "+filepath)
project = ProjectRepository(filepath) # Open file
activeFrontEnd = project.GetDesignByName("Current Control Double Frame")

#%%  List of all variables
variables = activeFrontEnd.Circuit.Variables

GRID_strength = next(variable for variable in variables if variable.Name == "Strength")
GRID_strength.Value = str(20)
DSRF_ON = next(variable for variable in variables if variable.Name == "DSRF_ON")
DSRF_ON.Value = str(1)

for variable in variables:
    print("Name:" + variable.Name + "\t Value:" + variable.Value)

#%%  Run Simulation
job = activeFrontEnd.TransientAnalysis.NewJob()
status = job.Run()

#%% Get results
t = job.TimePoints
#AFE
I_AC1 = np.array(job.GetSignalByName('I_AC1 - Instantaneous Current').DataPoints)
I_AC2 = np.array(job.GetSignalByName('I_AC2 - Instantaneous Current').DataPoints)
I_AC3 = np.array(job.GetSignalByName('I_AC3 - Instantaneous Current').DataPoints)
V_AC1 = np.array(job.GetSignalByName('V_AC1 - Instantaneous Voltage').DataPoints)
V_AC2 = np.array(job.GetSignalByName('V_AC2 - Instantaneous Voltage').DataPoints)
V_AC3 = np.array(job.GetSignalByName('V_AC3 - Instantaneous Voltage').DataPoints)
V_PCC1 = np.array(job.GetSignalByName('V_PCC1 - Instantaneous Voltage').DataPoints)
V_PCC2 = np.array(job.GetSignalByName('V_PCC2 - Instantaneous Voltage').DataPoints)
V_PCC3 = np.array(job.GetSignalByName('V_PCC3 - Instantaneous Voltage').DataPoints)
V_DC = np.array(job.GetSignalByName('VP1 - Instantaneous Voltage').DataPoints)
#PARK
I_Dpos = np.array(job.GetSignalByName('Sc3:Sc11:SUM1 - inputs[0]').DataPoints)
I_Qpos = np.array(job.GetSignalByName('Sc3:Sc11:SUM2 - inputs[0]').DataPoints)
I_Dneg = np.array(job.GetSignalByName('Sc3:Sc11:SUM3 - inputs[0]').DataPoints)
I_Qneg = np.array(job.GetSignalByName('Sc3:Sc11:SUM4 - inputs[0]').DataPoints)
I_Dnegtopos = np.array(job.GetSignalByName('Sc3:Sc11:SUM1 - inputs[1]').DataPoints)
I_Qnegtopos = np.array(job.GetSignalByName('Sc3:Sc11:SUM2 - inputs[1]').DataPoints)
I_Dpostoneg = np.array(job.GetSignalByName('Sc3:Sc11:SUM3 - inputs[1]').DataPoints)
I_Qpostoneg = np.array(job.GetSignalByName('Sc3:Sc11:SUM4 - inputs[1]').DataPoints)
V_Dpos = np.array(job.GetSignalByName('Sc3:Sc10:SUM1 - inputs[0]').DataPoints)
V_Qpos = np.array(job.GetSignalByName('Sc3:Sc10:SUM2 - inputs[0]').DataPoints)
V_Dneg = np.array(job.GetSignalByName('Sc3:Sc10:SUM3 - inputs[0]').DataPoints)
V_Qneg = np.array(job.GetSignalByName('Sc3:Sc10:SUM4 - inputs[0]').DataPoints)
V_Dnegtopos = np.array(job.GetSignalByName('Sc3:Sc10:SUM1 - inputs[1]').DataPoints)
V_Qnegtopos = np.array(job.GetSignalByName('Sc3:Sc10:SUM2 - inputs[1]').DataPoints)
V_Dpostoneg = np.array(job.GetSignalByName('Sc3:Sc10:SUM3 - inputs[1]').DataPoints)
V_Qpostoneg = np.array(job.GetSignalByName('Sc3:Sc10:SUM4 - inputs[1]').DataPoints)
#DECOUPLING
I_Dposdec = np.array(job.GetSignalByName('Sc3:Sc11:SUM1 - Out').DataPoints)
I_Qposdec = np.array(job.GetSignalByName('Sc3:Sc11:SUM2 - Out').DataPoints)
I_Dnegdec = np.array(job.GetSignalByName('Sc3:Sc11:SUM3 - Out').DataPoints)
I_Qnegdec = np.array(job.GetSignalByName('Sc3:Sc11:SUM4 - Out').DataPoints)
V_Dposdec = np.array(job.GetSignalByName('Sc3:Sc10:SUM1 - Out').DataPoints)
V_Qposdec = np.array(job.GetSignalByName('Sc3:Sc10:SUM2 - Out').DataPoints)
V_Dnegdec = np.array(job.GetSignalByName('Sc3:Sc10:SUM3 - Out').DataPoints)
V_Qnegdec = np.array(job.GetSignalByName('Sc3:Sc10:SUM4 - Out').DataPoints)
#CONTROL
I_DposFilt = np.array(job.GetSignalByName('Sc3:Sc2:Sc1:SUM1 - inputs[0]').DataPoints)
I_DposSetP = np.array(job.GetSignalByName('Sc3:Sc2:Sc1:SUM1 - inputs[1]').DataPoints)
I_QposFilt = np.array(job.GetSignalByName('Sc3:Sc2:Sc2:SUM1 - inputs[0]').DataPoints)
I_QposSetP = np.array(job.GetSignalByName('Sc3:Sc2:Sc2:SUM1 - inputs[1]').DataPoints)
I_DnegFilt = np.array(job.GetSignalByName('Sc3:Sc7:Sc1:SUM1 - inputs[0]').DataPoints)
I_DnegSetP = np.array(job.GetSignalByName('Sc3:Sc7:Sc1:SUM1 - inputs[1]').DataPoints)
I_QnegFilt = np.array(job.GetSignalByName('Sc3:Sc7:Sc2:SUM1 - inputs[0]').DataPoints)
I_QnegSetP = np.array(job.GetSignalByName('Sc3:Sc7:Sc2:SUM1 - inputs[1]').DataPoints)
#FEEDFORWARD
V_DposCtrl = np.array(job.GetSignalByName('Sc3:Sc3:SUM1 - inputs[0]').DataPoints)
V_Dposfeed = np.array(job.GetSignalByName('Sc3:Sc3:SUM1 - inputs[1]').DataPoints)
V_QposCtrl = np.array(job.GetSignalByName('Sc3:Sc3:SUM2 - inputs[0]').DataPoints)
V_Qposfeed = np.array(job.GetSignalByName('Sc3:Sc3:SUM2 - inputs[1]').DataPoints)
V_DnegCtrl = np.array(job.GetSignalByName('Sc3:Sc8:SUM1 - inputs[0]').DataPoints)
V_Dnegfeed = np.array(job.GetSignalByName('Sc3:Sc8:SUM1 - inputs[1]').DataPoints)
V_QnegCtrl = np.array(job.GetSignalByName('Sc3:Sc8:SUM2 - inputs[0]').DataPoints)
V_Qnegfeed = np.array(job.GetSignalByName('Sc3:Sc8:SUM2 - inputs[1]').DataPoints)
#COMBINING
V_Ctrldpos = np.array(job.GetSignalByName('Sc3:SUM1 - inputs[0]').DataPoints)
V_Ctrldneg = np.array(job.GetSignalByName('Sc3:SUM1 - inputs[1]').DataPoints)
V_Ctrld = np.array(job.GetSignalByName('Sc3:SUM1 - Out').DataPoints)
V_Ctrlqpos = np.array(job.GetSignalByName('Sc3:SUM2 - inputs[0]').DataPoints)
V_Ctrlqneg = np.array(job.GetSignalByName('Sc3:SUM2 - inputs[1]').DataPoints)
V_Ctrlq = np.array(job.GetSignalByName('Sc3:SUM2 - Out').DataPoints)
#SHAPING
V_Ctrl1 = np.array(job.GetSignalByName('Sc3:Sc4:InvPark1 - A').DataPoints)
V_Ctrl2 = np.array(job.GetSignalByName('Sc3:Sc4:InvPark1 - B').DataPoints)
V_Ctrl3 = np.array(job.GetSignalByName('Sc3:Sc4:InvPark1 - C').DataPoints)
#MODULATOR
V_MOD1 = np.array(job.GetSignalByName('Sc3:Sc4:SUM1 - Out').DataPoints)
V_MOD2 = np.array(job.GetSignalByName('Sc3:Sc4:SUM2 - Out').DataPoints)
V_MOD3 = np.array(job.GetSignalByName('Sc3:Sc4:SUM3 - Out').DataPoints)
PWM1 = np.array(job.GetSignalByName('Sc2:PWM1 - Out').DataPoints)
PWM2 = np.array(job.GetSignalByName('Sc2:PWM2 - Out').DataPoints)
PWM3 = np.array(job.GetSignalByName('Sc2:PWM3 - Out').DataPoints)

#%% Plot Curve

fig1, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Currents')
ax1.plot(t, I_AC1, label='I_AC1')
ax1.plot(t, I_AC2, label='I_AC2')
ax1.plot(t, I_AC3, label='I_AC3')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, I_Dposdec, label='I_D+')
ax2.plot(t, I_Qposdec, label='I_Q+')
ax2.plot(t, I_Dnegdec, label='I_D-')
ax2.plot(t, I_Qnegdec, label='I_Q-')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0, 2)
ax2.set_ylabel('DQ decoupled [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig2, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Currents')
ax1.plot(t, I_AC1, label='I_AC1')
ax1.plot(t, I_AC2, label='I_AC2')
ax1.plot(t, I_AC3, label='I_AC3')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, I_Dposdec, label='I_D+')
ax2.plot(t, I_Qposdec, label='I_Q+')
ax2.plot(t, I_Dnegdec, label='I_D-')
ax2.plot(t, I_Qnegdec, label='I_Q-')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0.78, 0.86)
ax2.set_ylabel('DQ decoupled [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig3, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Currents - decoupling')
ax1.plot(t, I_Dpos, label='I_D+grid')
ax1.plot(t, I_Qpos, label='I_Q+grid')
ax1.plot(t, I_Dnegtopos, label='I_Dnegtopos')
ax1.plot(t, I_Qnegtopos, label='I_Qnegtopos')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('DQ pos [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, I_Dneg, label='I_D-grid')
ax2.plot(t, I_Qneg, label='I_Q-grid')
ax2.plot(t, I_Dpostoneg, label='I_Dpostoneg')
ax2.plot(t, I_Qpostoneg, label='I_Qpostoneg')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0, 2)
ax2.set_ylabel('DQ neg [A]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig4, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Currents - decoupling')
ax1.plot(t, I_Dpos, label='I_D+grid')
ax1.plot(t, I_Qpos, label='I_Q+grid')
ax1.plot(t, I_Dnegtopos, label='I_Dnegtopos')
ax1.plot(t, I_Qnegtopos, label='I_Qnegtopos')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('DQ pos [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, I_Dneg, label='I_D-grid')
ax2.plot(t, I_Qneg, label='I_Q-grid')
ax2.plot(t, I_Dpostoneg, label='I_Dpostoneg')
ax2.plot(t, I_Qpostoneg, label='I_Qpostoneg')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0.78, 0.86)
ax2.set_ylabel('DQ neg [A]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig5, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Voltage')
ax1.plot(t, V_PCC1, label='V_PCC1')
ax1.plot(t, V_AC1, label='V_AC1')
ax1.plot(t, V_PCC2, label='V_PCC2')
ax1.plot(t, V_AC2, label='V_AC2')
ax1.plot(t, V_PCC3, label='V_PCC3')
ax1.plot(t, V_AC3, label='V_AC3')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('Voltage [V]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_Dposdec, label='V_D+')
ax2.plot(t, V_Qposdec, label='V_Q+')
ax2.plot(t, V_Dnegdec, label='V_D-')
ax2.plot(t, V_Qnegdec, label='V_Q-')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0, 2)
ax2.set_ylabel('DQ decoupled [V]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig6, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Voltage')
ax1.plot(t, V_PCC1, label='V_PCC1')
ax1.plot(t, V_AC1, label='V_AC1')
ax1.plot(t, V_PCC2, label='V_PCC2')
ax1.plot(t, V_AC2, label='V_AC2')
ax1.plot(t, V_PCC3, label='V_PCC3')
ax1.plot(t, V_AC3, label='V_AC3')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('Voltage [V]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_Dposdec, label='V_D+')
ax2.plot(t, V_Qposdec, label='V_Q+')
ax2.plot(t, V_Dnegdec, label='V_D-')
ax2.plot(t, V_Qnegdec, label='V_Q-')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0.78, 0.86)
ax2.set_ylabel('DQ decoupled [V]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig7, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Voltage - decoupling')
ax1.plot(t, V_Dpos, label='V_D+grid')
ax1.plot(t, V_Qpos, label='V_Q+grid')
ax1.plot(t, V_Dnegtopos, label='V_Dnegtopos')
ax1.plot(t, V_Qnegtopos, label='V_Qnegtopos')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('DQ pos [V]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_Dneg, label='V_D-grid')
ax2.plot(t, V_Qneg, label='V_Q-grid')
ax2.plot(t, V_Dpostoneg, label='V_Dpostoneg')
ax2.plot(t, V_Qpostoneg, label='V_Qpostoneg')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0, 2)
ax2.set_ylabel('DQ neg [V]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig8, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Voltage - decoupling')
ax1.plot(t, V_Dpos, label='V_D+grid')
ax1.plot(t, V_Qpos, label='V_Q+grid')
ax1.plot(t, V_Dnegtopos, label='V_Dnegtopos')
ax1.plot(t, V_Qnegtopos, label='V_Qnegtopos')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('DQ pos [V]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_Dneg, label='V_D-grid')
ax2.plot(t, V_Qneg, label='V_Q-grid')
ax2.plot(t, V_Dpostoneg, label='V_Dpostoneg')
ax2.plot(t, V_Qpostoneg, label='V_Qpostoneg')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0.78, 0.86)
ax2.set_ylabel('DQ neg [V]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig9, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - Current Control')
ax1.plot(t, I_QposFilt, label='I_Q+Filt')
ax1.plot(t, I_QposSetP, label='I_Q+SetP')
ax1.plot(t, I_DposFilt, label='I_D+Filt')
ax1.plot(t, I_DposSetP, label='I_D+SetP')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('positive frame [A]')
ax1.grid(True)
ax1.legend(loc='lower right')
ax2.plot(t, I_QnegFilt, label='I_Q-Filt')
ax2.plot(t, I_QnegSetP, label='I_Q-SetP')
ax2.plot(t, I_DnegFilt, label='I_D-Filt')
ax2.plot(t, I_DnegSetP, label='I_D-SetP')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0, 2)
ax2.set_ylabel('Negative frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower right')

fig10, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - Control Voltage Shaping')
ax1.plot(t, V_Ctrldpos, label='V_Ctrldpos')
ax1.plot(t, V_Ctrldneg, label='V_Ctrldneg')
ax1.plot(t, V_Ctrld, label='V_Ctrld')
ax1.set_ylim(-1, 1)
ax1.set_ylabel('positive frame [pu]')
ax1.grid(True)
ax1.legend(loc='lower right')
ax2.plot(t, V_Ctrlqpos, label='V_Ctrldpoq')
ax2.plot(t, V_Ctrlqneg, label='V_Ctrldneq')
ax2.plot(t, V_Ctrlq, label='V_Ctrlq')
ax2.set_ylim(-1, 1)
ax2.set_xlim(0, 2)
ax2.set_ylabel('Negative frame [pu]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower right')

fig11, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - Modulator')
ax1.plot(t, V_Ctrl1, label='V_Ctrl1')
ax1.plot(t, V_Ctrl2, label='V_Ctrl2')
ax1.plot(t, V_Ctrl3, label='V_Ctrl3')
ax1.set_ylim(-1, 1)
ax1.set_ylabel('Voltages [pu]')
ax1.grid(True)
ax1.legend(loc='lower right')
ax2.plot(t, V_MOD1, label='V_MOD1')
ax2.plot(t, V_MOD2, label='V_MOD2')
ax2.plot(t, V_MOD3, label='V_MOD3')
ax2.set_ylim(0, 1)
ax2.set_xlim(0, 2)
ax2.set_ylabel('Duty Cycles []')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower right')

fig12, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - Modulator')
ax1.plot(t, V_Ctrl1, label='V_Ctrl1')
ax1.plot(t, V_Ctrl2, label='V_Ctrl2')
ax1.plot(t, V_Ctrl3, label='V_Ctrl3')
ax1.set_ylim(-1, 1)
ax1.set_ylabel('Voltages [pu]')
ax1.grid(True)
ax1.legend(loc='lower right')
ax2.plot(t, V_MOD1, label='V_MOD1')
ax2.plot(t, V_MOD2, label='V_MOD2')
ax2.plot(t, V_MOD3, label='V_MOD3')
ax2.set_ylim(0, 1)
ax2.set_xlim(0.36, 0.44)
ax2.set_ylabel('Duty Cycles []')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower right')

plt.show()
# %%
