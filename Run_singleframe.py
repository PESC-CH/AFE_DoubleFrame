#%%  Load required module
import matplotlib.pyplot as plt
from aesim.simba import Design, JsonProjectRepository
import os, pathlib
import numpy as np
import math

#%%  Open Design
filepath = os.path.join(pathlib.Path().absolute(), "3ph_ActiveFrontEnd.jsimba")
print("loading model: "+filepath)
project = JsonProjectRepository(filepath) # Open file
activeFrontEnd = project.GetDesignByName("Current Control Single Frame")

#%%  List of all variables
variables = activeFrontEnd.Circuit.Variables

GRID_strength = next(variable for variable in variables if variable.Name == "Strength")
GRID_strength.Value = str(20)

for variable in variables:
    print("Name:" + variable.Name + "\t Value:" + variable.Value)

#%%  Run Simulation
job = activeFrontEnd.TransientAnalysis.NewJob()
status = job.Run()

#%% Get results
t = job.TimePoints
#AFE
I_AC1 = np.array(job.GetSignalByName('I_AC1 - Instantaneous Current').DataPoints)
I_AC2 = np.array(job.GetSignalByName('I_AC2 - Instantaneous Current').DataPoints)
I_AC3 = np.array(job.GetSignalByName('I_AC3 - Instantaneous Current').DataPoints)
V_AC1 = np.array(job.GetSignalByName('V_AC1 - Instantaneous Voltage').DataPoints)
V_AC2 = np.array(job.GetSignalByName('V_AC2 - Instantaneous Voltage').DataPoints)
V_AC3 = np.array(job.GetSignalByName('V_AC3 - Instantaneous Voltage').DataPoints)
V_PCC1 = np.array(job.GetSignalByName('V_PCC1 - Instantaneous Voltage').DataPoints)
V_PCC2 = np.array(job.GetSignalByName('V_PCC2 - Instantaneous Voltage').DataPoints)
V_PCC3 = np.array(job.GetSignalByName('V_PCC3 - Instantaneous Voltage').DataPoints)
V_DC = np.array(job.GetSignalByName('VP1 - Instantaneous Voltage').DataPoints)
#PARK
Theta = np.array(job.GetSignalByName('Sc3:PARK - Angle').DataPoints)
I_D = np.array(job.GetSignalByName('Sc3:PARK - D').DataPoints)
I_Q = np.array(job.GetSignalByName('Sc3:PARK - Q').DataPoints)
V_D = np.array(job.GetSignalByName('Sc3:PARK2 - D').DataPoints)
V_Q = np.array(job.GetSignalByName('Sc3:PARK2 - Q').DataPoints)
#CONTROL
I_DFilt = np.array(job.GetSignalByName('Sc3:Sc2:Sc1:SUM1 - inputs[0]').DataPoints)
I_DSetP = np.array(job.GetSignalByName('Sc3:Sc2:Sc1:SUM1 - inputs[1]').DataPoints)
I_QFilt = np.array(job.GetSignalByName('Sc3:Sc2:Sc2:SUM1 - inputs[0]').DataPoints)
I_QSetP = np.array(job.GetSignalByName('Sc3:Sc2:Sc2:SUM1 - inputs[1]').DataPoints)
#FEEDFORWARD
V_DCtrl = np.array(job.GetSignalByName('Sc3:Sc3:SUM1 - inputs[0]').DataPoints)
V_Dfeed = np.array(job.GetSignalByName('Sc3:Sc3:SUM1 - inputs[1]').DataPoints)
V_QCtrl = np.array(job.GetSignalByName('Sc3:Sc3:SUM2 - inputs[0]').DataPoints)
V_Qfeed = np.array(job.GetSignalByName('Sc3:Sc3:SUM2 - inputs[1]').DataPoints)
#SHAPING
V_Ctrl1 = np.array(job.GetSignalByName('Sc3:Sc4:InvPark1 - A').DataPoints)
V_Ctrl2 = np.array(job.GetSignalByName('Sc3:Sc4:InvPark1 - B').DataPoints)
V_Ctrl3 = np.array(job.GetSignalByName('Sc3:Sc4:InvPark1 - C').DataPoints)
#MODULATOR
V_MOD1 = np.array(job.GetSignalByName('Sc3:Sc4:SUM1 - Out').DataPoints)
V_MOD2 = np.array(job.GetSignalByName('Sc3:Sc4:SUM2 - Out').DataPoints)
V_MOD3 = np.array(job.GetSignalByName('Sc3:Sc4:SUM3 - Out').DataPoints)
PWM1 = np.array(job.GetSignalByName('Sc2:PWM1 - Out').DataPoints)
PWM2 = np.array(job.GetSignalByName('Sc2:PWM2 - Out').DataPoints)
PWM3 = np.array(job.GetSignalByName('Sc2:PWM3 - Out').DataPoints)

#%% Plot Curve

fig1, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Currents')
ax1.plot(t, I_AC1, label='I_AC1')
ax1.plot(t, I_AC2, label='I_AC2')
ax1.plot(t, I_AC3, label='I_AC3')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, I_D, label='I_D')
ax2.plot(t, I_Q, label='I_Q')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0, 1)
ax2.set_ylabel('DQ [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig2, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Voltages')
ax1.plot(t, V_PCC1, label='V_PCC1')
ax1.plot(t, V_AC1, label='V_AC1')
ax1.plot(t, V_PCC2, label='V_PCC2')
ax1.plot(t, V_AC2, label='V_AC2')
ax1.plot(t, V_PCC3, label='V_PCC3')
ax1.plot(t, V_AC3, label='V_AC3')
ax1.set_ylim(-400, 400)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_D, label='V_D')
ax2.plot(t, V_Q, label='V_Q')
ax2.set_ylim(-100, 400)
ax2.set_xlim(0, 1)
ax2.set_ylabel('Voltages in Synchronous Frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig3, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - AC Voltages')
ax1.plot(t, V_PCC1, label='V_PCC1')
ax1.plot(t, V_AC1, label='V_AC1')
ax1.plot(t, V_PCC2, label='V_PCC2')
ax1.plot(t, V_AC2, label='V_AC2')
ax1.plot(t, V_PCC3, label='V_PCC3')
ax1.plot(t, V_AC3, label='V_AC3')
ax1.set_ylim(-400, 400)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_D, label='V_D')
ax2.plot(t, V_Q, label='V_Q')
ax2.set_ylim(-100, 400)
ax2.set_xlim(0.35, 0.45)
ax2.set_ylabel('Voltages in Synchronous Frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig4, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - Control')
ax1.plot(t, I_QFilt, label='I_QFilt')
ax1.plot(t, I_QSetP, label='I_QSetP')
ax1.plot(t, I_DFilt, label='I_DFilt')
ax1.plot(t, I_DSetP, label='I_DSetP')
ax1.set_ylim(-500, 500)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower right')
ax2.plot(t, V_DCtrl, label='V_DCtrl')
ax2.plot(t, V_Dfeed, label='V_Dfeed')
ax2.plot(t, V_QCtrl, label='V_QCtrl')
ax2.plot(t, V_Qfeed, label='V_Qfeed')
ax2.set_ylim(-500, 500)
ax2.set_xlim(0, 1)
ax2.set_ylabel('Voltages in Synchronous Frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower right')

fig5, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - Modulator')
ax1.plot(t, V_Ctrl1, label='V_Ctrl1')
ax1.plot(t, V_Ctrl2, label='V_Ctrl2')
ax1.plot(t, V_Ctrl3, label='V_Ctrl3')
ax1.set_ylim(-1, 1)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower right')
ax2.plot(t, V_MOD1, label='V_MOD1')
ax2.plot(t, V_MOD2, label='V_MOD2')
ax2.plot(t, V_MOD3, label='V_MOD3')
ax2.set_ylim(0, 1)
ax2.set_xlim(0, 1)
ax2.set_ylabel('Voltages in Synchronous Frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower right')

fig6, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - Modulator')
ax1.plot(t, V_Ctrl1, label='V_Ctrl1')
ax1.plot(t, V_Ctrl2, label='V_Ctrl2')
ax1.plot(t, V_Ctrl3, label='V_Ctrl3')
ax1.set_ylim(-1, 1)
ax1.set_ylabel('Currents [A]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_MOD1, label='V_MOD1')
ax2.plot(t, V_MOD2, label='V_MOD2')
ax2.plot(t, V_MOD3, label='V_MOD3')
ax2.set_ylim(0, 1)
ax2.set_xlim(0.38, 0.46)
ax2.set_ylabel('Voltages in Synchronous Frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig7, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - PLL Sync')
ax1.plot(t, Theta, label='Theta')
ax1.set_ylim(-1, 10)
ax1.set_ylabel('theta [rad]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_D, label='V_D')
ax2.plot(t, V_Q, label='V_Q')
ax2.set_ylim(-400, 400)
ax2.set_xlim(0, 0.1)
ax2.set_ylabel('Voltages in Synchronous Frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

fig8, (ax1,ax2) = plt.subplots(2, 1, sharex=True)
ax1.set_title(activeFrontEnd.Name+' - PLL Sync')
ax1.plot(t, Theta, label='Theta')
ax1.set_ylim(-1, 10)
ax1.set_ylabel('theta [rad]')
ax1.grid(True)
ax1.legend(loc='lower left')
ax2.plot(t, V_D, label='V_D')
ax2.plot(t, V_Q, label='V_Q')
ax2.set_ylim(-400, 400)
ax2.set_xlim(0.35, 0.45)
ax2.set_ylabel('Voltages in Synchronous Frame [A]')
ax2.set_xlabel('time [s]')
ax2.grid(True)
ax2.legend(loc='lower left')

plt.show()
# %%
